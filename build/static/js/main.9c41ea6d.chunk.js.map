{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","onsubmit","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA4DeA,MA1Df,SAAkBC,GAAQ,IAAD,EACKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAD9C,mBACdC,EADc,KACPC,EADO,KAGfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAatB,OAEI,cADA,CACA,QAAMW,UAAU,YAAYC,SAZX,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMiB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAEVC,EAAS,KAKT,UACKL,EAAME,KACC,qCACI,uBAAOqB,KAAK,OACLC,YAAY,mBACZrB,MAAOC,EACPqB,KAAK,OACLX,UAAU,kBACVY,SAAUf,EACVgB,IAAKrB,IAEZ,wBAAQQ,UAAU,mBAAlB,wBAIJ,qCACI,uBAAOS,KAAK,OACLC,YAAY,aACZrB,MAAOC,EACPqB,KAAK,OACLX,UAAU,aACVY,SAAUf,EACVgB,IAAKrB,IAEZ,wBAAQQ,UAAU,cAAlB,0BAxBhB,Q,eCkBOc,MAxCf,YAA+D,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EAElC/B,mBAAS,CAC7BiB,GAAI,KACJf,MAAO,KAJ+C,mBAEnDD,EAFmD,KAE7C+B,EAF6C,KAe1D,OAAI/B,EAAKgB,GACE,cAAC,EAAD,CAAUhB,KAAMA,EAAMe,SATX,SAAAd,GAClB6B,EAAW9B,EAAKgB,GAAGf,GACnB8B,EAAQ,CACJf,GAAI,KACJf,MAAO,QASR0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKtB,UAAWqB,EAAKE,WAAa,oBAC9B,WADJ,UAGI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKJ,UAAU,QAAf,UACI,cAAC,IAAD,CACIwB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BJ,UAAU,gBAEd,cAAC,IAAD,CAAQwB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAIf,MAAOgC,EAAKb,QACjDR,UAAU,mBAXLsB,OC4BdG,MAnDf,WAAqB,IAAD,EACUtC,mBAAS,IADnB,mBACT4B,EADS,KACFW,EADE,KA0ChB,OACI,gCACI,4DACA,cAAC,EAAD,CAAUvB,SAzCF,SAAAkB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAC3BW,EAASE,OAoCL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAhBN,SAAAZ,GAClB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAS4CZ,WAzBtC,SAAAb,GACf,IAAM0B,EAAa,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAMA,KAExDsB,EAASI,IAsBoEZ,WAjC9D,SAACc,EAAQC,GACnBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG5CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCR5DC,MAVf,WAEE,OACE,qBAAKpC,UAAU,WAAf,SACI,cAAC,EAAD,OCFRqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9c41ea6d.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n    const inputRef = useRef(null)\n\n    useEffect(() => {\n        inputRef.current.focus()\n    })\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        props.onsubmit({\n            id: Math.floor(Math.random() * 1000),\n            text: input\n        });\n        setInput('') //makes the button clickable\n    };\n    // this form below is the input and the button\n    return (\n        // added the onsubmit to stop the page from refreshing when you click on the submit button\n        <form className='todo-form' onSubmit={handleSubmit}>\n            {props.edit ? (\n                    <>\n                        <input type='text'\n                               placeholder='update your item'\n                               value={input}\n                               name='text'\n                               className='todo-input edit'\n                               onChange={handleChange}\n                               ref={inputRef}\n                        />\n                        <button className=\"todo-button edit\"> update</button>\n                    </>\n                ) :\n                (\n                    <>\n                        <input type='text'\n                               placeholder='add a todo'\n                               value={input}\n                               name='text'\n                               className='todo-input'\n                               onChange={handleChange}\n                               ref={inputRef}\n                        />\n                        <button className=\"todo-button\"> Add todo</button>\n                    </>\n                )}\n            }\n\n        </form>\n    )\n}\n\nexport default TodoForm\n\n","import React, {useState} from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport {RiCloseCircleLine} from \"react-icons/ri\";\nimport {TiEdit} from \"react-icons/ti\";\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo }) {\n\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate =  value =>{\n        updateTodo(edit.id,value)\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n    if (edit.id){\n        return <TodoForm edit={edit} onsubmit={submitUpdate} />\n    }\n\n\n    return todos.map((todo, index) => (\n        <div className={todo.isComplete ? 'todo-row complete' :\n            'todo-row'} key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className=\"icons\">\n                <RiCloseCircleLine\n                    onClick={() => removeTodo(todo.id)}\n                    className='delete-icon'/>\n\n                <TiEdit onClick={() => setEdit({id: todo.id, value: todo.text})}\n                        className='edit-icon'/>\n\n            </div>\n        </div>\n    ))\n}\n\nexport default Todo","import React, {useState} from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Todo from \"./Todo\";\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    //the next function is going to add the list\n    const AddTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n        setTodos(newTodos);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\n        );\n    };\n\n    const removeTodo = id => {\n        const removeArr  = [...todos].filter(todo => todo.id !==id)\n\n        setTodos(removeArr)\n    };\n\n\n\n\n    const completeTodos = id =>{\n        let updatedTodos = todos.map(todo =>{\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        });\n        setTodos(updatedTodos);\n    };\n\n\n\n    return(\n        <div>\n            <h1> What's the plan for Today</h1>\n            <TodoForm onsubmit={AddTodo}/>\n            <Todo todos={todos} completeTodo={completeTodos} removeTodo={removeTodo} updateTodo={updateTodo}/>\n        </div>\n    )\n}\n\nexport default TodoList","import './App.css';\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n\n  return (\n    <div className=\"todo-app\">\n        <TodoList/>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}